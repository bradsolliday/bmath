var searchIndex = JSON.parse('{\
"bmath":{"doc":"This crate contains code written by Bradley Solliday for…","i":[[3,"CFrac","bmath","A sequence of integers [a0; a1, a2, a3, ...] where all but…",null,null],[3,"PCache","","An object for calculating and caching consecutive prime…",null,null],[11,"new","","Returns a new empty PCache with buffer capacity of bufcap.",0,[[],["pcache",3]]],[11,"nth_prime","","Returns the nth prime number. First checks if nth prime…",0,[[]]],[11,"cached_primes","","Returns a new Vec of all primes cached so far. The outputs…",0,[[],["vec",3]]],[11,"from_fraction","","Returns the continued fraction (CFrac) of the rational…",1,[[],["cfrac",3]]],[11,"from_ratio","","Returns the continued fraction of the given ratio.",1,[[["ratio",3]],["cfrac",3]]],[11,"convergents","","Returns a vector of Ratios representing the continued…",1,[[],[["vec",3],["ratio",3]]]],[0,"algo","","A couple functions for calculating gcd\'s",null,null],[5,"gcd","bmath::algo","Returns the greatest common divisors of n and m using…",null,[[["primint",8]],["primint",8]]],[5,"gcd_factors","","Returns (d, a, b) where d is the gcd of n and m, and a and…",null,[[]]],[11,"from","bmath","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"eq","","",1,[[["cfrac",3]]]],[11,"ne","","",1,[[["cfrac",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"PCache"],[3,"CFrac"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","i":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. Overflows may…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. Overflows may…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[],["option",4]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix (typically `2..=36`).",13,[[],["result",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. Overflows may…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. Overflows may…",3,[[],["option",4]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[0,"bigint","","",null,null],[3,"ParseBigIntError","num::bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion…",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",19,[[],[["option",4],["biguint",3]]]],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",20,null],[13,"NoSign","","",20,null],[13,"Plus","","",20,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",21,[[],[["option",4],["bigint",3]]]],[0,"complex","num","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[]]],[11,"div_ceil","","Ceiled integer division.",1,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",1,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",1,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[]]],[10,"is_even","","Returns `true` if the number is even.",1,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[3,"ExtendedGcd","","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",22,null],[12,"x","","",22,null],[12,"y","","",22,null],[5,"div_rem","","Simultaneous integer division and modulus",null,[[]]],[5,"div_floor","","Floored integer division",null,[[]]],[5,"mod_floor","","Floored integer modulus",null,[[]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[]]],[5,"div_ceil","","Ceiled integer division",null,[[]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",23,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",23,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",23,[[]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[]]],[8,"Average","","Provides methods to compute the average of two integers,…",null,null],[10,"average_ceil","","Returns the ceiling value of the average of `self` and…",24,[[]]],[10,"average_floor","","Returns the floor value of the average of `self` and…",24,[[]]],[5,"average_ceil","","Returns the ceiling value of the average of `x` and `y` --…",null,[[]]],[5,"average_floor","","Returns the floor value of the average of `x` and `y` --…",null,[[]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[3,"RangeFrom","","An iterator over the infinite range starting at `start`",null,null],[5,"range_from","","Return an iterator over the infinite range starting at…",null,[[],["rangefrom",3]]],[3,"RangeStepFrom","","An iterator over the infinite range starting at `start` by…",null,null],[5,"range_step_from","","Return an iterator over the infinite range starting at…",null,[[],["rangestepfrom",3]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. Overflows may…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. Overflows may…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",25,[[]]],[10,"neg_infinity","","Returns negative infinity.",25,[[]]],[10,"nan","","Returns NaN.",25,[[]]],[10,"neg_zero","","Returns `-0.0`.",25,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",25,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",25,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",25,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",25,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",25,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",25,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",25,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",25,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",25,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",25,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",25,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",25,[[]]],[11,"trunc","","Return the integer part of a number.",25,[[]]],[11,"fract","","Returns the fractional part of a number.",25,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",25,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",25,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",25,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",25,[[]]],[11,"min","","Returns the minimum of the two numbers.",25,[[]]],[11,"max","","Returns the maximum of the two numbers.",25,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",25,[[]]],[11,"powi","","Raise a number to an integer power.",25,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",25,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",25,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",25,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",26,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",26,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",26,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",26,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",26,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",26,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",26,[[]]],[10,"LN_10","","Return `ln(10.0)`.",26,[[]]],[10,"LN_2","","Return `ln(2.0)`.",26,[[]]],[10,"LOG10_E","","Return `log10(e)`.",26,[[]]],[10,"LOG2_E","","Return `log2(e)`.",26,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",26,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",26,[[]]],[11,"TAU","","Return the full circle constant `τ`.",26,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",26,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",26,[[]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",27,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",28,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",30,[[],["option",4]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of `self`.",31,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[0,"overflowing","num::traits::ops","",null,null],[8,"OverflowingAdd","num::traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean indicating…",34,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean…",35,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean…",36,[[]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",37,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",38,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",39,[[]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",40,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",41,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",42,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",43,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",44,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",45,[[]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[0,"real","num::traits","",null,null],[8,"Real","num::traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",46,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",46,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",46,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",46,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",46,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",46,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",46,[[]]],[10,"trunc","","Return the integer part of a number.",46,[[]]],[10,"fract","","Returns the fractional part of a number.",46,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",46,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",46,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",46,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",46,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",46,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",46,[[]]],[10,"powi","","Raise a number to an integer power.",46,[[]]],[10,"powf","","Raise a number to a real number power.",46,[[]]],[10,"sqrt","","Take the square root of a number.",46,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",46,[[]]],[10,"exp2","","Returns `2^(self)`.",46,[[]]],[10,"ln","","Returns the natural logarithm of the number.",46,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",46,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",46,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",46,[[]]],[10,"to_degrees","","Converts radians to degrees.",46,[[]]],[10,"to_radians","","Converts degrees to radians.",46,[[]]],[10,"max","","Returns the maximum of the two numbers.",46,[[]]],[10,"min","","Returns the minimum of the two numbers.",46,[[]]],[10,"abs_sub","","The positive difference of two numbers.",46,[[]]],[10,"cbrt","","Take the cubic root of a number.",46,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",46,[[]]],[10,"sin","","Computes the sine of a number (in radians).",46,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",46,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",46,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",46,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",46,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",46,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",46,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",46,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",46,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",46,[[]]],[10,"sinh","","Hyperbolic sine function.",46,[[]]],[10,"cosh","","Hyperbolic cosine function.",46,[[]]],[10,"tanh","","Hyperbolic tangent function.",46,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",46,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",46,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",46,[[]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",13,null],[10,"from_str_radix","","Convert from a string and radix (typically `2..=36`).",13,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",47,null],[13,"Invalid","","",47,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",48,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",8,[[]]],[10,"max_value","","returns the largest finite number this type can represent",8,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",2,[[]]],[10,"infinity","","Returns the infinite value.",2,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",2,[[]]],[10,"neg_zero","","Returns `-0.0`.",2,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",2,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",2,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",2,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",2,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",2,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",2,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",2,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",2,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",2,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",2,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",2,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",2,[[]]],[10,"trunc","","Return the integer part of a number.",2,[[]]],[10,"fract","","Returns the fractional part of a number.",2,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",2,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",2,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",2,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",2,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",2,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",2,[[]]],[10,"powi","","Raise a number to an integer power.",2,[[]]],[10,"powf","","Raise a number to a floating point power.",2,[[]]],[10,"sqrt","","Take the square root of a number.",2,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",2,[[]]],[10,"exp2","","Returns `2^(self)`.",2,[[]]],[10,"ln","","Returns the natural logarithm of the number.",2,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",2,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",2,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",2,[[]]],[11,"to_degrees","","Converts radians to degrees.",2,[[]]],[11,"to_radians","","Converts degrees to radians.",2,[[]]],[10,"max","","Returns the maximum of the two numbers.",2,[[]]],[10,"min","","Returns the minimum of the two numbers.",2,[[]]],[10,"abs_sub","","The positive difference of two numbers.",2,[[]]],[10,"cbrt","","Take the cubic root of a number.",2,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",2,[[]]],[10,"sin","","Computes the sine of a number (in radians).",2,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",2,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",2,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",2,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",2,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",2,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",2,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",2,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",2,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",2,[[]]],[10,"sinh","","Hyperbolic sine function.",2,[[]]],[10,"cosh","","Hyperbolic cosine function.",2,[[]]],[10,"tanh","","Hyperbolic tangent function.",2,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",2,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",2,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",2,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",2,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",26,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",26,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",26,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",26,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",26,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",26,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",26,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",26,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",26,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",26,[[]]],[10,"LN_10","","Return `ln(10.0)`.",26,[[]]],[10,"LN_2","","Return `ln(2.0)`.",26,[[]]],[10,"LOG10_E","","Return `log10(e)`.",26,[[]]],[10,"LOG2_E","","Return `log2(e)`.",26,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",26,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",26,[[]]],[11,"TAU","","Return the full circle constant `τ`.",26,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",26,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",26,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. Overflows may…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. Overflows may…",3,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[]]],[5,"zero","","Returns the additive identity, `0`.",null,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",14,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",14,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",14,[[]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",18,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",18,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",18,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",15,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",15,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",15,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",15,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",15,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",15,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",15,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",15,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",15,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",15,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",15,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",15,[[]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",9,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",10,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",11,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",28,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",27,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",29,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",30,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",12,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",31,null],[10,"inv","","Returns the multiplicative inverse of `self`.",31,[[]]],[8,"MulAdd","","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",32,null],[10,"mul_add","","Performs the fused multiply-add operation.",32,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",33,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",16,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",16,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",37,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",39,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",38,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",40,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",42,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",43,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",44,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",45,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",41,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",7,null],[10,"pow","","Returns `self` to the power `rhs`.",7,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",17,[[]]],[10,"abs_sub","","The positive difference of two numbers.",17,[[]]],[10,"signum","","Returns the sign of the number.",17,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",17,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",17,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::bigint","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",49,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",49,[[]]],[11,"from","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",50,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",50,[[]]],[11,"from","num::complex","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","num::bigint","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"to_string","","",51,[[],["string",3]]],[11,"from","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"to_string","","",52,[[],["string",3]]],[11,"from","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"from","num::complex","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"to_string","","",53,[[],["string",3]]],[11,"from","num::integer","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"from","","",54,[[]]],[11,"into_iter","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","num::iter","",55,[[]]],[11,"into_iter","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into_iter","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into_iter","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into_iter","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into_iter","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"from","num::traits","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"to_string","","",48,[[],["string",3]]],[11,"from","num::rational","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"into","","",61,[[]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"from","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"into","","",62,[[]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"to_string","","",62,[[],["string",3]]],[11,"description","num::bigint","",51,[[]]],[11,"description","","",52,[[]]],[11,"hash","","",49,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[["bigint",3]]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[["bigint",3]]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[["biguint",3]]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[]]],[11,"rem_assign","","",49,[[]]],[11,"rem_assign","","",50,[[["biguint",3]]]],[11,"rem_assign","","",49,[[]]],[11,"default","","",50,[[],["biguint",3]]],[11,"default","","",49,[[],["bigint",3]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[["biguint",3]]]],[11,"mul_assign","","",49,[[["bigint",3]]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",49,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",50,[[["biguint",3]]]],[11,"mul_assign","","",50,[[]]],[11,"mul_assign","","",49,[[["bigint",3]]]],[11,"mul_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",49,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr_assign","","",50,[[]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"shr","","",49,[[],["bigint",3]]],[11,"shr","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[["biguint",3]],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[["biguint",3]],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",20,[[["sign",4]],["sign",4]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[["bigint",3]],["bigint",3]]],[11,"mul","","",49,[[["bigint",3]],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"mul","","",49,[[],["bigint",3]]],[11,"mul","","",50,[[],["biguint",3]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"product","","",50,[[],["biguint",3]]],[11,"product","","",49,[[],["bigint",3]]],[11,"from_i64","","",50,[[],[["option",4],["biguint",3]]]],[11,"from_i128","","",50,[[],[["option",4],["biguint",3]]]],[11,"from_u64","","",50,[[],[["option",4],["biguint",3]]]],[11,"from_u128","","",50,[[],[["option",4],["biguint",3]]]],[11,"from_f64","","",50,[[],[["option",4],["biguint",3]]]],[11,"from_i64","","",49,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",49,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",49,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",49,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",49,[[],[["option",4],["bigint",3]]]],[11,"not","","",49,[[],["bigint",3]]],[11,"bitxor_assign","","",50,[[["biguint",3]]]],[11,"bitxor_assign","","",50,[[["biguint",3]]]],[11,"bitxor_assign","","",49,[[["bigint",3]]]],[11,"bitxor_assign","","",49,[[["bigint",3]]]],[11,"div","","",50,[[["biguint",3]],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[["bigint",3]],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",50,[[["biguint",3]],["biguint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[],["bigint",3]]],[11,"div","","",50,[[],["biguint",3]]],[11,"div","","",49,[[["bigint",3]],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[["biguint",3]],["biguint",3]]],[11,"rem","","",50,[[["biguint",3]],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[["bigint",3]],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",49,[[],["bigint",3]]],[11,"rem","","",50,[[],["biguint",3]]],[11,"rem","","",49,[[["bigint",3]],["bigint",3]]],[11,"partial_cmp","","",20,[[["sign",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",50,[[["biguint",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",49,[[["bigint",3]],[["ordering",4],["option",4]]]],[11,"nth_root","","",49,[[],["bigint",3]]],[11,"sqrt","","",49,[[],["bigint",3]]],[11,"cbrt","","",49,[[],["bigint",3]]],[11,"nth_root","","",50,[[],["biguint",3]]],[11,"sqrt","","",50,[[],["biguint",3]]],[11,"cbrt","","",50,[[],["biguint",3]]],[11,"eq","","",20,[[["sign",4]]]],[11,"eq","","",51,[[["parsebiginterror",3]]]],[11,"ne","","",51,[[["parsebiginterror",3]]]],[11,"eq","","",50,[[["biguint",3]]]],[11,"eq","","",52,[[["tryfrombiginterror",3]]]],[11,"ne","","",52,[[["tryfrombiginterror",3]]]],[11,"eq","","",49,[[["bigint",3]]]],[11,"from_str","","",50,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str","","",49,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[["bigint",3]]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[["bigint",3]]]],[11,"div_assign","","",50,[[["biguint",3]]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[["biguint",3]]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",50,[[]]],[11,"div_assign","","",49,[[]]],[11,"div_assign","","",49,[[]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",52,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_bigint","","",50,[[],[["option",4],["bigint",3]]]],[11,"to_bigint","","",49,[[],[["option",4],["bigint",3]]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[["bigint",3]]]],[11,"add_assign","","",50,[[["biguint",3]]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[["bigint",3]]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[["biguint",3]]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",50,[[]]],[11,"add_assign","","",49,[[]]],[11,"add_assign","","",49,[[]]],[11,"abs","","",49,[[],["bigint",3]]],[11,"abs_sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"signum","","",49,[[],["bigint",3]]],[11,"is_positive","","",49,[[]]],[11,"is_negative","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",50,[[]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[["bigint",3]]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[["biguint",3]]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",50,[[["biguint",3]]]],[11,"sub_assign","","",49,[[]]],[11,"sub_assign","","",49,[[["bigint",3]]]],[11,"sub_assign","","",49,[[]]],[11,"div_rem","","",50,[[["biguint",3]]]],[11,"div_floor","","",50,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",50,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",50,[[["biguint",3]]]],[11,"div_ceil","","",50,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",50,[[["biguint",3]],["biguint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",50,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",50,[[["biguint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",50,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",50,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",50,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",50,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",50,[[["biguint",3]],["biguint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",50,[[["biguint",3]],["biguint",3]]],[11,"div_rem","","",49,[[["bigint",3]]]],[11,"div_floor","","",49,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",49,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",49,[[["bigint",3]]]],[11,"div_ceil","","",49,[[["bigint",3]],["bigint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",49,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",49,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",49,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",49,[[["bigint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",49,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",49,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",49,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",49,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",49,[[["bigint",3]],["bigint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",49,[[["bigint",3]],["bigint",3]]],[11,"bitor_assign","","",50,[[["biguint",3]]]],[11,"bitor_assign","","",49,[[["bigint",3]]]],[11,"bitor_assign","","",49,[[["bigint",3]]]],[11,"bitor_assign","","",50,[[["biguint",3]]]],[11,"checked_mul","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",50,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"bitor","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",49,[[["bigint",3]],["bigint",3]]],[11,"to_biguint","","",49,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",50,[[],[["option",4],["biguint",3]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",50,[[],[["biguint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",49,[[],[["parsebiginterror",3],["result",4],["bigint",3]]]],[11,"checked_div","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",50,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"sum","","",49,[[],["bigint",3]]],[11,"sum","","",50,[[],["biguint",3]]],[11,"fmt","","",52,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",51,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_i64","","",49,[[],["option",4]]],[11,"to_i128","","",49,[[],["option",4]]],[11,"to_u64","","",49,[[],["option",4]]],[11,"to_u128","","",49,[[],["option",4]]],[11,"to_f32","","",49,[[],["option",4]]],[11,"to_f64","","",49,[[],["option",4]]],[11,"to_i64","","",50,[[],["option",4]]],[11,"to_i128","","",50,[[],["option",4]]],[11,"to_u64","","",50,[[],["option",4]]],[11,"to_u128","","",50,[[],["option",4]]],[11,"to_f32","","",50,[[],["option",4]]],[11,"to_f64","","",50,[[],["option",4]]],[11,"one","","",50,[[],["biguint",3]]],[11,"set_one","","",50,[[]]],[11,"is_one","","",50,[[]]],[11,"one","","",49,[[],["bigint",3]]],[11,"set_one","","",49,[[]]],[11,"is_one","","",49,[[]]],[11,"clone","","",20,[[],["sign",4]]],[11,"clone","","",52,[[],["tryfrombiginterror",3]]],[11,"clone","","",51,[[],["parsebiginterror",3]]],[11,"clone","","",50,[[],["biguint",3]]],[11,"clone_from","","",50,[[["biguint",3]]]],[11,"clone","","",49,[[],["bigint",3]]],[11,"clone_from","","",49,[[["bigint",3]]]],[11,"zero","","",49,[[],["bigint",3]]],[11,"set_zero","","",49,[[]]],[11,"is_zero","","",49,[[]]],[11,"zero","","",50,[[],["biguint",3]]],[11,"set_zero","","",50,[[]]],[11,"is_zero","","",50,[[]]],[11,"checked_add","","",50,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_add","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[["biguint",3]],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[["biguint",3]],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[["bigint",3]],["bigint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",50,[[],["biguint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"sub","","",49,[[],["bigint",3]]],[11,"bitxor","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",50,[[["biguint",3]],["biguint",3]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[["bigint",3]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[["bigint",3]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",50,[[],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"neg","","",49,[[],["bigint",3]]],[11,"neg","","Negate Sign value.",20,[[],["sign",4]]],[11,"checked_sub","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",50,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"bitand_assign","","",50,[[["biguint",3]]]],[11,"bitand_assign","","",50,[[["biguint",3]]]],[11,"bitand_assign","","",49,[[["bigint",3]]]],[11,"bitand_assign","","",49,[[["bigint",3]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",50,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[["biguint",3]],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[["bigint",3]],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[["biguint",3]],["biguint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",50,[[],["biguint",3]]],[11,"add","","",49,[[["bigint",3]],["bigint",3]]],[11,"add","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",50,[[],["biguint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"shl","","",49,[[],["bigint",3]]],[11,"cmp","","",20,[[["sign",4]],["ordering",4]]],[11,"cmp","","",49,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",50,[[["biguint",3]],["ordering",4]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[["biguint",3]],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",49,[[],["bigint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"from","","",50,[[],["biguint",3]]],[11,"bitand","","",50,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",49,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",50,[[["biguint",3]],["biguint",3]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"shl_assign","","",49,[[]]],[11,"shl_assign","","",50,[[]]],[11,"pow","","",50,[[["biguint",3]],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[["biguint",3]],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[["biguint",3]],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",49,[[],["bigint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"pow","","",50,[[["biguint",3]],["biguint",3]]],[11,"pow","","",50,[[],["biguint",3]]],[11,"fmt","num::integer","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",22,[[["extendedgcd",3]]]],[11,"ne","","",22,[[["extendedgcd",3]]]],[11,"clone","","",22,[[],["extendedgcd",3]]],[11,"next","","",54,[[],["option",4]]],[11,"fmt","num::traits","",47,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub_assign","num::complex","",0,[[]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[["complex",3]]]],[11,"sub_assign","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"from_usize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_isize","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i8","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i16","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i64","","",0,[[],[["option",4],["complex",3]]]],[11,"from_u128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_i128","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f32","","",0,[[],[["option",4],["complex",3]]]],[11,"from_f64","","",0,[[],[["option",4],["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"description","","",53,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["result",4],["complex",3]]]],[11,"hash","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"rem_assign","","",0,[[["complex",3]]]],[11,"sum","","",0,[[],["complex",3]]],[11,"sum","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[["complex",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[["complex",3]]]],[11,"clone","","",0,[[],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"product","","",0,[[],["complex",3]]],[11,"product","","",0,[[],["complex",3]]],[11,"from","","",0,[[],[["option",4],["complex",3]]]],[11,"neg","","",0,[[]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",53,[[["parsecomplexerror",3]]]],[11,"ne","","",53,[[["parsecomplexerror",3]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],[["complex",3],["result",4]]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["complex",3]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",53,[[["formatter",3]],[["error",3],["result",4]]]],[11,"zero","","",0,[[],["complex",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[],["complex",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"as_","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["complex",3]]]],[11,"add_assign","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",0,[[],["complex",3]]],[11,"from","","",0,[[],["complex",3]]],[11,"zero","num::rational","",61,[[],["ratio",3]]],[11,"is_zero","","",61,[[]]],[11,"set_zero","","",61,[[]]],[11,"sub_assign","","",61,[[]]],[11,"sub_assign","","",61,[[["ratio",3]]]],[11,"sub_assign","","",61,[[["ratio",3]]]],[11,"sub_assign","","",61,[[]]],[11,"from","","",61,[[],["ratio",3]]],[11,"from","","",61,[[],["ratio",3]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"description","","",62,[[]]],[11,"hash","","",61,[[]]],[11,"checked_sub","","",61,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"rem_assign","","",61,[[["ratio",3]]]],[11,"rem_assign","","",61,[[["ratio",3]]]],[11,"rem_assign","","",61,[[]]],[11,"rem_assign","","",61,[[]]],[11,"sum","","",61,[[],["ratio",3]]],[11,"sum","","",61,[[],["ratio",3]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",61,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"mul_assign","","",61,[[]]],[11,"mul_assign","","",61,[[]]],[11,"mul_assign","","",61,[[["ratio",3]]]],[11,"mul_assign","","",61,[[["ratio",3]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_u128","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f32","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_f64","","",61,[[],[["ratio",3],["option",4]]]],[11,"from_i64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_i128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u64","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_u128","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f32","","",61,[[],[["option",4],["ratio",3]]]],[11,"from_f64","","",61,[[],[["option",4],["ratio",3]]]],[11,"mul","","",61,[[],["ratio",3]]],[11,"mul","","",61,[[],["ratio",3]]],[11,"mul","","",61,[[["ratio",3]],["ratio",3]]],[11,"mul","","",61,[[["ratio",3]],["ratio",3]]],[11,"clone","","",62,[[],["parseratioerror",3]]],[11,"clone","","",61,[[],["ratio",3]]],[11,"inv","","",61,[[],["ratio",3]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","","",61,[[],["ratio",3]]],[11,"sub","","",61,[[["ratio",3]],["ratio",3]]],[11,"sub","","",61,[[["ratio",3]],["ratio",3]]],[11,"sub","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[["bigint",3]],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[["biguint",3]],["ratio",3]]],[11,"pow","","",61,[[["biguint",3]],["ratio",3]]],[11,"pow","","",61,[[["bigint",3]],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"pow","","",61,[[],["ratio",3]]],[11,"abs","","",61,[[],["ratio",3]]],[11,"abs_sub","","",61,[[["ratio",3]],["ratio",3]]],[11,"signum","","",61,[[],["ratio",3]]],[11,"is_positive","","",61,[[]]],[11,"is_negative","","",61,[[]]],[11,"one","","",61,[[],["ratio",3]]],[11,"is_one","","",61,[[]]],[11,"set_one","","",61,[[]]],[11,"product","","",61,[[],["ratio",3]]],[11,"product","","",61,[[],["ratio",3]]],[11,"to_i64","","",61,[[],["option",4]]],[11,"to_i128","","",61,[[],["option",4]]],[11,"to_u64","","",61,[[],["option",4]]],[11,"to_u128","","",61,[[],["option",4]]],[11,"to_f64","","",61,[[],["option",4]]],[11,"neg","","",61,[[],["ratio",3]]],[11,"div","","",61,[[["ratio",3]],["ratio",3]]],[11,"div","","",61,[[],["ratio",3]]],[11,"div","","",61,[[["ratio",3]],["ratio",3]]],[11,"div","","",61,[[],["ratio",3]]],[11,"rem","","",61,[[],["ratio",3]]],[11,"rem","","",61,[[["ratio",3]],["ratio",3]]],[11,"rem","","",61,[[],["ratio",3]]],[11,"rem","","",61,[[["ratio",3]],["ratio",3]]],[11,"partial_cmp","","",61,[[["ratio",3]],[["ordering",4],["option",4]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add","","",61,[[],["ratio",3]]],[11,"add","","",61,[[],["ratio",3]]],[11,"add","","",61,[[["ratio",3]],["ratio",3]]],[11,"add","","",61,[[["ratio",3]],["ratio",3]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",61,[[["ratio",3]],["ordering",4]]],[11,"checked_mul","","",61,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",61,[[],[["parseratioerror",3],["result",4],["ratio",3]]]],[11,"eq","","",61,[[["ratio",3]]]],[11,"eq","","",62,[[["parseratioerror",3]]]],[11,"ne","","",62,[[["parseratioerror",3]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"into","","",61,[[]]],[11,"div_assign","","",61,[[["ratio",3]]]],[11,"div_assign","","",61,[[["ratio",3]]]],[11,"div_assign","","",61,[[]]],[11,"div_assign","","",61,[[]]],[11,"add_assign","","",61,[[["ratio",3]]]],[11,"add_assign","","",61,[[["ratio",3]]]],[11,"add_assign","","",61,[[]]],[11,"add_assign","","",61,[[]]],[11,"checked_div","","",61,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"checked_add","","",61,[[["ratio",3]],[["option",4],["ratio",3]]]],[11,"next","num::iter","",57,[[],["option",4]]],[11,"next","","",55,[[],["option",4]]],[11,"size_hint","","",55,[[]]],[11,"next","","",58,[[],["option",4]]],[11,"next","","",59,[[],["option",4]]],[11,"size_hint","","",59,[[]]],[11,"next","","",60,[[],["option",4]]],[11,"size_hint","","",60,[[]]],[11,"next","","",56,[[],["option",4]]],[11,"size_hint","","",56,[[]]],[11,"clone","","",59,[[],["rangefrom",3]]],[11,"clone","","",58,[[],["rangestepinclusive",3]]],[11,"clone","","",55,[[],["range",3]]],[11,"clone","","",56,[[],["rangeinclusive",3]]],[11,"clone","","",57,[[],["rangestep",3]]],[11,"clone","","",60,[[],["rangestepfrom",3]]],[11,"next_back","","",55,[[],["option",4]]],[11,"next_back","","",56,[[],["option",4]]],[11,"new","num::bigint","Creates and initializes a BigInt.",49,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",49,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",49,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",49,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",49,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",49,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",49,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",49,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",49,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",49,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",49,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",49,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",49,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",49,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",49,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",49,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",49,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",49,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",49,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",49,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the `BigInt` as a `BigUint`.",49,[[],["biguint",3]]],[11,"into_parts","","Convert this `BigInt` into its `Sign` and `BigUint`…",49,[[]]],[11,"bits","","Determines the fewest bits necessary to express the…",49,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",49,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",49,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns `self ^ exponent`.",49,[[],["bigint",3]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",49,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",49,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",49,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",49,[[],["bigint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",49,[[],["option",4]]],[11,"new","","Creates and initializes a `BigUint`.",50,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",50,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",50,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",50,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",50,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",50,[[],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",50,[[],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",50,[[],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",50,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",50,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",50,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",50,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",50,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",50,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",50,[[]]],[11,"pow","","Returns `self ^ exponent`.",50,[[],["biguint",3]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",50,[[["biguint",3]],["biguint",3]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",50,[[],["biguint",3]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",50,[[],["biguint",3]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",50,[[],["biguint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",50,[[],["option",4]]],[11,"new","num::complex","Create a new Complex",0,[[],["complex",3]]],[11,"i","","Returns imaginary unit",0,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[],["complex",3]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[],["complex",3]]],[11,"inv","","Returns `1/self`",0,[[],["complex",3]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the [Manhattan…",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[],["complex",3]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",0,[[],["complex",3]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[],["complex",3]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[],["complex",3]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",0,[[],["complex",3]]],[11,"powf","","Raises `self` to a floating point power.",0,[[],["complex",3]]],[11,"log","","Returns the logarithm of `self` with respect to an…",0,[[],["complex",3]]],[11,"powc","","Raises `self` to a complex power.",0,[[["complex",3]],["complex",3]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[],["complex",3]]],[11,"sin","","Computes the sine of `self`.",0,[[],["complex",3]]],[11,"cos","","Computes the cosine of `self`.",0,[[],["complex",3]]],[11,"tan","","Computes the tangent of `self`.",0,[[],["complex",3]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[],["complex",3]]],[11,"acos","","Computes the principal value of the inverse cosine of…",0,[[],["complex",3]]],[11,"atan","","Computes the principal value of the inverse tangent of…",0,[[],["complex",3]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[],["complex",3]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[],["complex",3]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[],["complex",3]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",0,[[],["complex",3]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",0,[[],["complex",3]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",0,[[],["complex",3]]],[11,"finv","","Returns `1/self` using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"into_original","num::bigint","Extract the original value, if available. The value will…",52,[[]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",54,[[],["iterbinomial",3]]],[11,"new_raw","num::rational","Creates a `Ratio` without checking for `denom == 0` or…",61,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",61,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",61,[[]]],[11,"new","","Creates a new `Ratio`.",61,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",61,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",61,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",61,[[]]],[11,"reduced","","Returns a reduced copy of self.",61,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",61,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",61,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",61,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",61,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",61,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",61,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",61,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",61,[[],[["ratio",3],["option",4]]]],[11,"approximate_float","","",61,[[],[["option",4],["ratio",3]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"Num"],[8,"One"],[8,"PrimInt"],[8,"Saturating"],[8,"Signed"],[8,"Zero"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Real"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_bigint":{"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion…",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[11,"new","","Creates and initializes a BigInt.",1,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",1,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",1,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",1,[[],[["bigint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",1,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",1,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",1,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",1,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",1,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the `BigInt` as a `BigUint`.",1,[[],["biguint",3]]],[11,"into_parts","","Convert this `BigInt` into its `Sign` and `BigUint`…",1,[[]]],[11,"bits","","Determines the fewest bits necessary to express the…",1,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",1,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"pow","","Returns `self ^ exponent`.",1,[[]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",1,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",1,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",1,[[],["option",4]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",2,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",2,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",2,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",2,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",2,[[]]],[11,"pow","","Returns `self ^ exponent`.",2,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",2,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",2,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",2,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",2,[[],["option",4]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[],[["option",4],["biguint",3]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[],[["bigint",3],["option",4]]]],[11,"into_original","","Extract the original value, if available. The value will…",5,[[]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",2,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",1,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",1,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_bigint","","",1,[[],[["bigint",3],["option",4]]]],[11,"to_bigint","","",2,[[],[["bigint",3],["option",4]]]],[11,"to_biguint","","",1,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",2,[[],[["option",4],["biguint",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["biguint",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"eq","","",0,[[["sign",4]]]],[11,"eq","","",1,[[["bigint",3]]]],[11,"eq","","",2,[[["biguint",3]]]],[11,"eq","","",6,[[["parsebiginterror",3]]]],[11,"ne","","",6,[[["parsebiginterror",3]]]],[11,"eq","","",5,[[["tryfrombiginterror",3]]]],[11,"ne","","",5,[[["tryfrombiginterror",3]]]],[11,"cmp","","",0,[[["sign",4]],["ordering",4]]],[11,"cmp","","",1,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",2,[[["biguint",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["sign",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",1,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"mul","","",0,[[["sign",4]],["sign",4]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"neg","","Negate Sign value.",0,[[],["sign",4]]],[11,"neg","","",1,[[],["bigint",3]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"not","","",1,[[],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"product","","",1,[[]]],[11,"product","","",2,[[]]],[11,"sum","","",1,[[]]],[11,"sum","","",2,[[]]],[11,"try_from","","",2,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"from_str","","",1,[[],[["bigint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str","","",2,[[],[["result",4],["parsebiginterror",3],["biguint",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["sign",4]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","","",6,[[],["parsebiginterror",3]]],[11,"clone","","",5,[[],["tryfrombiginterror",3]]],[11,"default","","",1,[[],["bigint",3]]],[11,"default","","",2,[[],["biguint",3]]],[11,"description","","",6,[[]]],[11,"description","","",5,[[]]],[11,"nth_root","","",1,[[]]],[11,"sqrt","","",1,[[]]],[11,"cbrt","","",1,[[]]],[11,"nth_root","","",2,[[]]],[11,"sqrt","","",2,[[]]],[11,"cbrt","","",2,[[]]],[11,"div_rem","","",1,[[["bigint",3]]]],[11,"div_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",1,[[["bigint",3]]]],[11,"div_ceil","","",1,[[]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",1,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[["bigint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[11,"div_rem","","",2,[[["biguint",3]]]],[11,"div_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",2,[[["biguint",3]]]],[11,"div_ceil","","",2,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",2,[[]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",2,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",2,[[]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[11,"to_i64","","",1,[[],["option",4]]],[11,"to_i128","","",1,[[],["option",4]]],[11,"to_u64","","",1,[[],["option",4]]],[11,"to_u128","","",1,[[],["option",4]]],[11,"to_f32","","",1,[[],["option",4]]],[11,"to_f64","","",1,[[],["option",4]]],[11,"to_i64","","",2,[[],["option",4]]],[11,"to_i128","","",2,[[],["option",4]]],[11,"to_u64","","",2,[[],["option",4]]],[11,"to_u128","","",2,[[],["option",4]]],[11,"to_f32","","",2,[[],["option",4]]],[11,"to_f64","","",2,[[],["option",4]]],[11,"from_i64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_i128","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_u64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_u128","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_f64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_i64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_i128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_f64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",1,[[],[["bigint",3],["parsebiginterror",3],["result",4]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[],[["result",4],["parsebiginterror",3],["biguint",3]]]],[11,"zero","","",1,[[],["bigint",3]]],[11,"set_zero","","",1,[[]]],[11,"is_zero","","",1,[[]]],[11,"zero","","",2,[[],["biguint",3]]],[11,"set_zero","","",2,[[]]],[11,"is_zero","","",2,[[]]],[11,"one","","",1,[[],["bigint",3]]],[11,"set_one","","",1,[[]]],[11,"is_one","","",1,[[]]],[11,"one","","",2,[[],["biguint",3]]],[11,"set_one","","",2,[[]]],[11,"is_one","","",2,[[]]],[11,"checked_add","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_add","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_div","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[["biguint",3]],["bigint",3]]],[11,"pow","","",1,[[["biguint",3]],["bigint",3]]],[11,"pow","","",2,[[["biguint",3]],["biguint",3]]],[11,"pow","","",2,[[["biguint",3]],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"abs","","",1,[[],["bigint",3]]],[11,"abs_sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"signum","","",1,[[],["bigint",3]]],[11,"is_positive","","",1,[[]]],[11,"is_negative","","",1,[[]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"TryFromBigIntError"],[3,"ParseBigIntError"]]},\
"num_complex":{"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[]]],[11,"i","","Returns imaginary unit",0,[[]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",0,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[]]],[11,"powu","","Raises `self` to an unsigned integer power.",0,[[]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[]]],[11,"inv","","Returns `1/self`",0,[[]]],[11,"powi","","Raises `self` to a signed integer power.",0,[[]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the [Manhattan…",0,[[]]],[11,"norm","","Calculate |self|",0,[[]]],[11,"arg","","Calculate the principal Arg of self.",0,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",0,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",0,[[]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",0,[[]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,[[]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,[[]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",0,[[]]],[11,"powf","","Raises `self` to a floating point power.",0,[[]]],[11,"log","","Returns the logarithm of `self` with respect to an…",0,[[]]],[11,"powc","","Raises `self` to a complex power.",0,[[]]],[11,"expf","","Raises a floating point number to the complex power `self`.",0,[[]]],[11,"sin","","Computes the sine of `self`.",0,[[]]],[11,"cos","","Computes the cosine of `self`.",0,[[]]],[11,"tan","","Computes the tangent of `self`.",0,[[]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,[[]]],[11,"acos","","Computes the principal value of the inverse cosine of…",0,[[]]],[11,"atan","","Computes the principal value of the inverse tangent of…",0,[[]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,[[]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,[[]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,[[]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",0,[[]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",0,[[]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",0,[[]]],[11,"finv","","Returns `1/self` using floating-point operations.",0,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",0,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["complex",3]]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"div","","",0,[[]]],[11,"rem","","",0,[[["complex",3]]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"rem","","",0,[[]]],[11,"sub","","",0,[[["complex",3]]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"sub","","",0,[[]]],[11,"eq","","",0,[[["complex",3]]]],[11,"ne","","",0,[[["complex",3]]]],[11,"eq","","",1,[[["parsecomplexerror",3]]]],[11,"ne","","",1,[[["parsecomplexerror",3]]]],[11,"add","","",0,[[["complex",3]]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"add","","",0,[[]]],[11,"mul","","",0,[[["complex",3]]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"mul","","",0,[[]]],[11,"neg","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["complex",3]]],[11,"default","","",0,[[],["complex",3]]],[11,"description","","",1,[[]]],[11,"to_usize","","",0,[[],["option",4]]],[11,"to_isize","","",0,[[],["option",4]]],[11,"to_u8","","",0,[[],["option",4]]],[11,"to_u16","","",0,[[],["option",4]]],[11,"to_u32","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_i8","","",0,[[],["option",4]]],[11,"to_i16","","",0,[[],["option",4]]],[11,"to_i32","","",0,[[],["option",4]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_f32","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"from_usize","","",0,[[],["option",4]]],[11,"from_isize","","",0,[[],["option",4]]],[11,"from_u8","","",0,[[],["option",4]]],[11,"from_u16","","",0,[[],["option",4]]],[11,"from_u32","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_i8","","",0,[[],["option",4]]],[11,"from_i16","","",0,[[],["option",4]]],[11,"from_i32","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from","","",0,[[["toprimitive",8]],["option",4]]],[11,"as_","","",0,[[]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[],["result",4]]],[11,"zero","","",0,[[]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"one","","",0,[[]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"inv","","",0,[[]]],[11,"mul_add","","",0,[[["complex",3]],["complex",3]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"mul_add_assign","","",0,[[["complex",3]]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[]]],[11,"pow","","",0,[[["complex",3]]]],[11,"pow","","",0,[[["complex",3]]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"average_ceil","","Returns the ceiling value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer",8]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]],[8,"Average","","Provides methods to compute the average of two integers,…",null,null],[10,"average_ceil","","Returns the ceiling value of the average of `self` and…",2,[[]]],[10,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",3,[[]]],[11,"div_ceil","","Ceiled integer division.",3,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",3,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",3,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",3,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",3,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",3,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",3,[[]]],[10,"is_even","","Returns `true` if the number is even.",3,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",3,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",3,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",3,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",3,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",3,[[]]],[11,"new","","For a given n, iterate over all binomial coefficients…",4,[[],["iterbinomial",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["extendedgcd",3]]]],[11,"ne","","",0,[[["extendedgcd",3]]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",0,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"IterBinomial"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[3,"RangeFrom","","An iterator over the infinite range starting at `start`",null,null],[3,"RangeStepFrom","","An iterator over the infinite range starting at `start` by…",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[],["range",3]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[],["rangeinclusive",3]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[],["rangestep",3]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[],["rangestepinclusive",3]]],[5,"range_from","","Return an iterator over the infinite range starting at…",null,[[],["rangefrom",3]]],[5,"range_step_from","","Return an iterator over the infinite range starting at…",null,[[],["rangestepfrom",3]]],[11,"from","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"next","","",3,[[],["option",4]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"clone","","",0,[[],["range",3]]],[11,"clone","","",1,[[],["rangeinclusive",3]]],[11,"clone","","",2,[[],["rangestep",3]]],[11,"clone","","",3,[[],["rangestepinclusive",3]]],[11,"clone","","",4,[[],["rangefrom",3]]],[11,"clone","","",5,[[],["rangestepfrom",3]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[],["ratio",3]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[]]],[11,"new","","Creates a new `Ratio`.",0,[[],["ratio",3]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[],["ratio",3]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[]]],[11,"reduced","","Returns a reduced copy of self.",0,[[],["ratio",3]]],[11,"recip","","Returns the reciprocal.",0,[[],["ratio",3]]],[11,"floor","","Rounds towards minus infinity.",0,[[],["ratio",3]]],[11,"ceil","","Rounds towards plus infinity.",0,[[],["ratio",3]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[],["ratio",3]]],[11,"trunc","","Rounds towards zero.",0,[[],["ratio",3]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[],["ratio",3]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[],["ratio",3]]],[11,"from_float","","Converts a float into a rational number.",0,[[["floatcore",8]],[["bigrational",6],["option",4]]]],[11,"approximate_float","","",0,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"from","","",0,[[],["ratio",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"div","","",0,[[["ratio",3]],["ratio",3]]],[11,"div","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"rem","","",0,[[["ratio",3]],["ratio",3]]],[11,"rem","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"sub","","",0,[[],["ratio",3]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[["parseratioerror",3]]]],[11,"ne","","",1,[[["parseratioerror",3]]]],[11,"cmp","","",0,[[],["ordering",4]]],[11,"partial_cmp","","",0,[[],[["ordering",4],["option",4]]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"add","","",0,[[["ratio",3]],["ratio",3]]],[11,"add","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"mul","","",0,[[["ratio",3]],["ratio",3]]],[11,"mul","","",0,[[],["ratio",3]]],[11,"neg","","",0,[[],["ratio",3]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"add_assign","","",0,[[["ratio",3]]]],[11,"add_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"sub_assign","","",0,[[["ratio",3]]]],[11,"sub_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"mul_assign","","",0,[[["ratio",3]]]],[11,"mul_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"div_assign","","",0,[[["ratio",3]]]],[11,"div_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"rem_assign","","",0,[[["ratio",3]]]],[11,"rem_assign","","",0,[[]]],[11,"hash","","",0,[[]]],[11,"product","","",0,[[]]],[11,"product","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"sum","","",0,[[]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[],[["ratio",3],["result",4],["parseratioerror",3]]]],[11,"into","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["ratio",3]]],[11,"clone","","",1,[[],["parseratioerror",3]]],[11,"description","","",1,[[]]],[11,"checked_add","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_div","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_mul","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"checked_sub","","",0,[[["ratio",3]],[["ratio",3],["option",4]]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_i64","","",0,[[],["option",4]]],[11,"from_i128","","",0,[[],["option",4]]],[11,"from_u64","","",0,[[],["option",4]]],[11,"from_u128","","",0,[[],["option",4]]],[11,"from_f32","","",0,[[],["option",4]]],[11,"from_f64","","",0,[[],["option",4]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[],[["ratio",3],["result",4],["parseratioerror",3]]]],[11,"one","","",0,[[],["ratio",3]]],[11,"is_one","","",0,[[]]],[11,"set_one","","",0,[[]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[],["ratio",3]]],[11,"pow","","",0,[[["biguint",3]],["ratio",3]]],[11,"pow","","",0,[[["biguint",3]],["ratio",3]]],[11,"pow","","",0,[[["bigint",3]],["ratio",3]]],[11,"pow","","",0,[[["bigint",3]],["ratio",3]]],[11,"abs","","",0,[[],["ratio",3]]],[11,"abs_sub","","",0,[[["ratio",3]],["ratio",3]]],[11,"signum","","",0,[[],["ratio",3]]],[11,"is_positive","","",0,[[]]],[11,"is_negative","","",0,[[]]],[11,"to_i64","","",0,[[],["option",4]]],[11,"to_i128","","",0,[[],["option",4]]],[11,"to_u64","","",0,[[],["option",4]]],[11,"to_u128","","",0,[[],["option",4]]],[11,"to_f64","","",0,[[],["option",4]]],[11,"zero","","",0,[[],["ratio",3]]],[11,"is_zero","","",0,[[]]],[11,"set_zero","","",0,[[]]],[11,"inv","","",0,[[],["ratio",3]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast",8]],[["option",4],["numcast",8]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. Overflows may…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. Overflows may…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[]]],[10,"neg_infinity","","Returns negative infinity.",7,[[]]],[10,"nan","","Returns NaN.",7,[[]]],[10,"neg_zero","","Returns `-0.0`.",7,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[]]],[11,"trunc","","Return the integer part of a number.",7,[[]]],[11,"fract","","Returns the fractional part of a number.",7,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[]]],[11,"min","","Returns the minimum of the two numbers.",7,[[]]],[11,"max","","Returns the maximum of the two numbers.",7,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[]]],[11,"powi","","Raise a number to an integer power.",7,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",8,[[]]],[10,"infinity","","Returns the infinite value.",8,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[]]],[10,"neg_zero","","Returns `-0.0`.",8,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[]]],[10,"trunc","","Return the integer part of a number.",8,[[]]],[10,"fract","","Returns the fractional part of a number.",8,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[]]],[10,"powi","","Raise a number to an integer power.",8,[[]]],[10,"powf","","Raise a number to a floating point power.",8,[[]]],[10,"sqrt","","Take the square root of a number.",8,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[]]],[10,"exp2","","Returns `2^(self)`.",8,[[]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[]]],[11,"to_degrees","","Converts radians to degrees.",8,[[]]],[11,"to_radians","","Converts degrees to radians.",8,[[]]],[10,"max","","Returns the maximum of the two numbers.",8,[[]]],[10,"min","","Returns the minimum of the two numbers.",8,[[]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[]]],[10,"cbrt","","Take the cubic root of a number.",8,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[]]],[10,"sinh","","Hyperbolic sine function.",8,[[]]],[10,"cosh","","Hyperbolic cosine function.",8,[[]]],[10,"tanh","","Hyperbolic tangent function.",8,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",9,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",9,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[]]],[11,"TAU","","Return the full circle constant `τ`.",9,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",9,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",9,[[]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one",8]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",10,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",10,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",18,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",19,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",20,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",21,null],[10,"inv","","Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",22,null],[10,"mul_add","","Performs the fused multiply-add operation.",22,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[]]],[0,"overflowing","num_traits::ops","",null,null],[8,"OverflowingAdd","num_traits::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean indicating…",24,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean…",25,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean…",26,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",27,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",27,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",28,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",29,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",30,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",31,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",32,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",33,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",34,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",35,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",36,[[]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["clone",8],["mul",8],["one",8]],[["clone",8],["mul",8],["one",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one",8],["clone",8],["checkedmul",8]],[["clone",8],["checkedmul",8],["one",8],["option",4]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",37,null],[10,"pow","","Returns `self` to the power `rhs`.",37,[[]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",38,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",38,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",38,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",38,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",38,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",38,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",38,[[]]],[10,"trunc","","Return the integer part of a number.",38,[[]]],[10,"fract","","Returns the fractional part of a number.",38,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",38,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",38,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",38,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",38,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",38,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",38,[[]]],[10,"powi","","Raise a number to an integer power.",38,[[]]],[10,"powf","","Raise a number to a real number power.",38,[[]]],[10,"sqrt","","Take the square root of a number.",38,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",38,[[]]],[10,"exp2","","Returns `2^(self)`.",38,[[]]],[10,"ln","","Returns the natural logarithm of the number.",38,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",38,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",38,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",38,[[]]],[10,"to_degrees","","Converts radians to degrees.",38,[[]]],[10,"to_radians","","Converts degrees to radians.",38,[[]]],[10,"max","","Returns the maximum of the two numbers.",38,[[]]],[10,"min","","Returns the minimum of the two numbers.",38,[[]]],[10,"abs_sub","","The positive difference of two numbers.",38,[[]]],[10,"cbrt","","Take the cubic root of a number.",38,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",38,[[]]],[10,"sin","","Computes the sine of a number (in radians).",38,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",38,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",38,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",38,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",38,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",38,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",38,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",38,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",38,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",38,[[]]],[10,"sinh","","Hyperbolic sine function.",38,[[]]],[10,"cosh","","Hyperbolic cosine function.",38,[[]]],[10,"tanh","","Hyperbolic tangent function.",38,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",38,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",38,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",38,[[]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",39,[[]]],[10,"abs_sub","","The positive difference of two numbers.",39,[[]]],[10,"signum","","Returns the sign of the number.",39,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",39,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",39,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",40,null],[10,"from_str_radix","","Convert from a string and radix (typically `2..=36`).",40,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);